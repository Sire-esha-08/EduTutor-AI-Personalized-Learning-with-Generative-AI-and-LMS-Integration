# -*- coding: utf-8 -*-
"""EDUTUTOR

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RT6mn4WX078HDdpwWvKuMqUe2p3HcbCh
"""

!pip install -q gradio transformers torch

import gradio as gr
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

model_name = "ibm-granite/granite-3.3-2b-instruct"
print("Loading model, this may take a while...")
EDUTUTOR_Token = "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"  # Your Hugging Face token

tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=EDUTUTOR_Token)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    device_map="auto",
    use_auth_token=EDUTUTOR_Token
)

device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Model loaded on {device}")

users = {
    "alice": {"password": "1234", "role": "student", "progress": {}},
    "bob": {"password": "abcd", "role": "teacher", "progress": {}},
    "admin": {"password": "admin", "role": "admin", "progress": {}}
}

session_state = {"user": None}

def login(username, password):
    user = users.get(username)
    if user and user["password"] == password:
        session_state["user"] = {"name": username, "role": user["role"]}
        return f"‚úÖ Logged in as {username} ({user['role']})"
    else:
        return "‚ùå Login failed"

def register(username, password, role):
    if username in users:
        return "‚ùå Username already exists!"
    if role not in ["student", "teacher", "admin"]:
        return "‚ùå Role must be student, teacher, or admin"
    users[username] = {"password": password, "role": role, "progress": {}}
    return f"‚úÖ User {username} registered successfully as {role}!"

def ai_tutor(subject, topic):
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    role = session_state["user"]["role"]
    prompt = (
        f"You are a helpful AI tutor for a {role}. Explain the following topic in {subject}:\n\n"
        f"Topic: {topic}\n\nExplanation:"
    )
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)

    user = session_state["user"]["name"]
    users[user]["progress"][topic] = "Learned"
    return response

def generate_quiz(subject, topic):
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    role = session_state["user"]["role"]
    prompt = (
        f"You are an AI quiz generator for a {role}. "
        f"Create 3 short quiz questions with answers about {topic} in {subject}.\n\n"
        "Format:\nQ1: ...\nA1: ...\nQ2: ...\nA2: ...\nQ3: ...\nA3: ..."
    )
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    quiz = tokenizer.decode(outputs[0], skip_special_tokens=True)

    user = session_state["user"]["name"]
    users[user]["progress"][topic] = "Quiz generated"
    return quiz

def view_progress():
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    user = session_state["user"]["name"]
    progress = users[user]["progress"]
    if not progress:
        return "üì≠ No progress yet."
    return "\n".join([f"{topic}: {status}" for topic, status in progress.items()])

with gr.Blocks(css="body {background: #f2f2f2;} textarea {font-family: monospace;}") as demo:
    gr.Markdown("## üéì AI Edu-Tutor App\nWelcome! Register or login to begin learning and generating quizzes.")

    with gr.Tab("üìù Register"):
        with gr.Group():
            reg_username = gr.Textbox(label="Choose Username")
            reg_password = gr.Textbox(label="Choose Password", type="password")
            reg_role = gr.Dropdown(choices=["student", "teacher", "admin"], label="Role")
            reg_btn = gr.Button("Register", variant="primary")
            reg_status = gr.Textbox(label="Registration Status", interactive=False)
            reg_btn.click(register, [reg_username, reg_password, reg_role], reg_status)

    with gr.Tab("üîê Login"):
        with gr.Group():
            username = gr.Textbox(label="Username")
            password = gr.Textbox(label="Password", type="password")
            login_btn = gr.Button("Login", variant="primary")
            login_status = gr.Textbox(label="Login Status", interactive=False)
            login_btn.click(login, [username, password], login_status)

    with gr.Tab("üìò AI Tutor"):
        with gr.Group():
            subject = gr.Textbox(label="Subject (e.g., Math, Science)")
            topic = gr.Textbox(label="Topic to learn about")
            ask_btn = gr.Button("Ask Tutor", variant="primary")
            tutor_response = gr.Textbox(label="AI Tutor Response", lines=10, interactive=False)
            ask_btn.click(fn=ai_tutor, inputs=[subject, topic], outputs=tutor_response)

    with gr.Tab("üß† Quiz Generator"):
        with gr.Group():
            subject_q = gr.Textbox(label="Subject")
            topic_q = gr.Textbox(label="Topic for quiz")
            quiz_btn = gr.Button("Generate Quiz", variant="primary")
            quiz_output = gr.Textbox(label="Quiz", lines=10, interactive=False)
            quiz_btn.click(fn=generate_quiz, inputs=[subject_q, topic_q], outputs=quiz_output)

    with gr.Tab("üìä Progress Tracker"):
        with gr.Group():
            progress_btn = gr.Button("View My Progress")
            progress_output = gr.Textbox(label="Progress", lines=10, interactive=False)
            progress_btn.click(fn=view_progress, outputs=progress_output)

demo.launch(share=True)